(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{186:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return d})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return f})),n.d(t,"useMDXComponents",(function(){return u})),n.d(t,"withMDXComponents",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),m=function(e){return function(t){var n=u(t.components);return i.a.createElement(e,o({},t,{components:n}))}},u=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,p=d["".concat(o,".").concat(m)]||d[m]||h[m]||r;return n?i.a.createElement(p,c(c({ref:t},s),{},{components:n})):i.a.createElement(p,c({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),i=n(8),r=(n(0),n(186)),o={sidebar_position:5,keywords:"pallet design, intermediate, runtime",theme:"codeview",code:"../static/code/kitties-tutorial/04-interacting-functions.rs"},s={unversionedId:"tutorials/Kitties/Part 1/interacting-functions",id:"tutorials/Kitties/Part 1/interacting-functions",isDocsHomePage:!1,title:"Interacting with your Kitties",description:"Add pallet capabilities that unleash the potential of your Substrate Kitty application.",source:"@site/docs/09-tutorials/01-Kitties/Part 1/interacting-functions.md",sourceDirName:"09-tutorials/01-Kitties/Part 1",slug:"/tutorials/Kitties/Part 1/interacting-functions",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 1/interacting-functions",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/09-tutorials/01-Kitties/Part 1/interacting-functions.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,keywords:"pallet design, intermediate, runtime",theme:"codeview",code:"../static/code/kitties-tutorial/04-interacting-functions.rs"},sidebar:"tutorialSidebar",previous:{title:"Dispatchables, Events and Errors",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 1/dispatchables-and-events"},next:{title:"Kitties front-end",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 2/kitties-frontend"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Learning outcomes",id:"learning-outcomes",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Set a price for each Kitty",id:"1-set-a-price-for-each-kitty",children:[]},{value:"2. Transfer a Kitty",id:"2-transfer-a-kitty",children:[]},{value:"3. Buy a Kitty",id:"3-buy-a-kitty",children:[]},{value:"4. Breed Kitties",id:"4-breed-kitties",children:[]},{value:"5. Genesis configuration",id:"5-genesis-configuration",children:[]},{value:"8. Update <code>runtime/lib.rs</code> and interact with your Kitties",id:"8-update-runtimelibrs-and-interact-with-your-kitties",children:[]}]},{value:"Next steps",id:"next-steps",children:[]}],l={toc:c};function d(e){var t=e.components,n=Object(i.default)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.default)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,Object(r.mdx)("em",{parentName:"p"},"Add pallet capabilities that unleash the potential of your Substrate Kitty application.")),Object(r.mdx)("h2",{id:"overview"},"Overview"),Object(r.mdx)("p",null,"Up until this point in the tutorial, we've built a chain capable of only creating and tracking the ownership of Kitties. In this part of the tutorial, we want to make our runtime more\nlike a game by introducing other functions like buying and\nselling Kitties. In order to achieve this, we'll first need to enable users\nto update the price of their Kitty. Then we can add functionality to enable users to transfer, buy and breed Kitties."),Object(r.mdx)("h2",{id:"learning-outcomes"},"Learning outcomes"),Object(r.mdx)("p",null,"\u27a1\ufe0f Learn how to create a dispatchable that updates an object in storage."),Object(r.mdx)("p",null,"\u27a1\ufe0f Getting a value from a struct in storage."),Object(r.mdx)("p",null,"\u27a1\ufe0f How to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer")," from FRAME's Currency trait."),Object(r.mdx)("p",null,"\u27a1\ufe0f How to write sanity check using ",Object(r.mdx)("inlineCode",{parentName:"p"},"ensure!()"),"."),Object(r.mdx)("h2",{id:"steps"},"Steps"),Object(r.mdx)("h3",{id:"1-set-a-price-for-each-kitty"},"1. Set a price for each Kitty"),Object(r.mdx)("p",null,"In ",Object(r.mdx)("a",{parentName:"p",href:"https://github.com/substrate-developer-hub/substrate-how-to-guides/blob/main/static/code/kitties-tutorial/04-interacting-functions.rs"},"the helper file for this part of the tutorial"),", you'll notice that the structure of ",Object(r.mdx)("inlineCode",{parentName:"p"},"set_price")," is already laid out."),Object(r.mdx)("p",null,"Your job is to replace ACTION lines #1, #2 and #3 lines with what you'll learn in sections A-D below. "),Object(r.mdx)("h4",{id:"a-checking-kitty-owner"},"A. Checking Kitty owner"),Object(r.mdx)("p",null,"As we create functions which modify objects in storage, we\nshould always check that only the appropriate users are successful when calling those dispatchable functions."),Object(r.mdx)("p",null,"For modifying a Kitty object, we'll first need to get the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Hash")," value of the owner of the\nKitty to ensure that it's the same as the sender."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},Object(r.mdx)("inlineCode",{parentName:"p"},"KittyOwner")," stores a mapping to an ",Object(r.mdx)("inlineCode",{parentName:"p"},"Option<T::AccountId>")," but that\ngiven ",Object(r.mdx)("inlineCode",{parentName:"p"},"Hash")," may not point to a generated and owned Kitty yet.\nThis means, whenever we fetch the owner of a Kitty, we need to\nresolve the possibility that it returns ",Object(r.mdx)("inlineCode",{parentName:"p"},"None"),". This could be\ncaused by bad user input or even some sort of problem with our\nruntime. Checking will help prevent these kinds of problems.")),Object(r.mdx)("p",null,"The general pattern for an ownership check will look something like this:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'let owner = Self::owner_of(object_id).ok_or("No owner for this object")?;\n\nensure!(owner == sender, "You are not the owner");\n')),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Your turn!")," Paste in this code snippet to replace ACTION #1:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'// Check that the Kitty has an owner (i.e. if it exists).\nlet owner = Self::owner_of(kitty_id).ok_or("No owner for this kitty")?;\n// Make sure the owner matches the corresponding owner.\nensure!(owner == sender, "You do not own this cat");\n')),Object(r.mdx)("h4",{id:"b-updating-the-price-of-our-kitty-object"},"B. Updating the price of our Kitty object"),Object(r.mdx)("p",null,"Every Kitty object has a price attribute that we've set to ",Object(r.mdx)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/primitive.u8.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"0u8"))," as a default value inside the\n",Object(r.mdx)("inlineCode",{parentName:"p"},"create_kitty")," function in ",Object(r.mdx)("a",{parentName:"p",href:"/docs/tutorials/Kitties/Part%201/dispatchables-and-events#2-write-the-create_kitty-dispatchable"},"Part II"),":"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"let new_kitty = Kitty {\n    id: random_hash,\n    dna: random_hash,\n    price: 0u8.into(), // <-- here \n    gender: Kitty::<T, T>::gender(random_hash),\n};\n")),Object(r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"We'll use this default value to check if the Kitty is for sale when we write the ",Object(r.mdx)("inlineCode",{parentName:"p"},"buy_kitty")," dispatchable in the next section."))),Object(r.mdx)("p",null,"To update the price of a Kitty, we'll need to:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Get the Kitty object."),Object(r.mdx)("li",{parentName:"ul"},"Update the price."),Object(r.mdx)("li",{parentName:"ul"},"Push it back into storage.")),Object(r.mdx)("p",null,"Changing a value in an existing object in storage would be written in the following way:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"let mut object = Self::get_object(object_id);\nobject.value = new_value;\n\n<Object<T>>::insert(object_id, object);\n")),Object(r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"Rust expects you to declare a variable as mutable (using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"mut")," keyword) whenever its value is going to be updated."))),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Your turn!")," Paste in the following snippet to replace the ACTION #2 line: "),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"// Set the Kitty price.\nlet mut kitty = Self::kitty(kitty_id);\nkitty.price = new_price;\n\n// Update new Kitty infomation to storage.\n<Kitties<T>>::insert(kitty_id, kitty);\n")),Object(r.mdx)("h4",{id:"c-sanity-checks"},"C. Sanity checks"),Object(r.mdx)("p",null,"In a similar vain of checking permissions, we also need to ensure that our runtime performs regular sanity\nchecks to mitigate any risk that things go wrong ","\u2014"," such as users flooding the chain with heavy transactions or anything that could break the chain."),Object(r.mdx)("p",null,"If we're creating a function geared to update the value of an object in storage,\nthe first thing we better do is make sure the object exists at all.\nBy using ",Object(r.mdx)("inlineCode",{parentName:"p"},"ensure!"),", we can create a safeguard against poor user input, whether malicious or unintentional. For example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"ensure!(<MyObject<T>>::exists(object_id));\n")),Object(r.mdx)("p",null,"This is already declared in the template helper code, but it's an important check to remind ourselves about."),Object(r.mdx)("h4",{id:"d-deposit-an-event"},"D. Deposit an event"),Object(r.mdx)("p",null,"Once all checks are passed and the new price is written to storage, we can deposit an event\n",Object(r.mdx)("a",{parentName:"p",href:"/docs/tutorials/Kitties/Part%201/dispatchables-and-events#4-implement-pallet-events"},"just like we did in Part III"),".\nReplace the line marked as ACTION #3x with:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"Self::deposit_event(Event::PriceSet(sender, kitty_id, new_price));\n")),Object(r.mdx)("p",null," Now whenever the ",Object(r.mdx)("inlineCode",{parentName:"p"},"set_price")," dispatchable is called successfully, it will emit a ",Object(r.mdx)("inlineCode",{parentName:"p"},"PriceSet")," event. \ud83c\udf89"),Object(r.mdx)("h3",{id:"2-transfer-a-kitty"},"2. Transfer a Kitty"),Object(r.mdx)("p",null,"You already have the tools and knowledge you'll need to create the transfer functionality from ",Object(r.mdx)("a",{parentName:"p",href:"#1-set-a-price-for-each-kitty"},"step 1"),". The main difference with this function is that it will have ",Object(r.mdx)("strong",{parentName:"p"},"two parts"),":"),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"A ",Object(r.mdx)("strong",{parentName:"li"},"dispatchable function")," called ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer()"),": this is a publicly callable dispatchable exposed by your pallet."),Object(r.mdx)("li",{parentName:"ol"},"A ",Object(r.mdx)("strong",{parentName:"li"},"private function")," called ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer_from()"),": this will be a private helper function called by ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer()")," to handle all storage updates when transferring a Kitty.")),Object(r.mdx)("p",null,"Separating the logic this way makes the private ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer_from()")," function reusable\nby other dispatchable functions of our pallet, without needing to duplicate code. In our case, we're going to reuse it for\nthe ",Object(r.mdx)("inlineCode",{parentName:"p"},"buy_kitty")," dispatchable we're creating in the next section."),Object(r.mdx)("h4",{id:"transfer"},Object(r.mdx)("inlineCode",{parentName:"h4"},"transfer")),Object(r.mdx)("p",null,"Paste in the following snippet to replace ACTION #5 in the template code:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'#[pallet::weight(100)]\npub fn transfer(\n    origin: OriginFor<T>,\n    to: T::AccountId,\n    kitty_id: T::Hash,\n) -> DispatchResultWithPostInfo {\n    let sender = ensure_signed(origin)?;\n\n    // Verify Kitty owner: must be the account invoking this transaction.\n    let owner = Self::owner_of(kitty_id).ok_or("No owner for this kitty")?;\n    ensure!(owner == sender, "You do not own this kitty");\n\n    // Transfer.\n    Self::transfer_from(sender, to, kitty_id)?;\n\n    Ok(().into())\n}\n')),Object(r.mdx)("p",null,"By now the above pattern should be familiar. We always check that the transaction is signed; then we verify that the Kitty\nbeing transfer is owned by the sender of this transaction; and last we call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer_from")," helper to update\nall storage items appropriately."),Object(r.mdx)("h4",{id:"transfer_from"},Object(r.mdx)("inlineCode",{parentName:"h4"},"transfer_from")),Object(r.mdx)("p",null,"Now, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer_from")," function will be a helper to perform all storage updates once a Kitty has been bought and sold.\nAll it needs to do is perform safety checks and update the following storage items:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"KittyOwner"),": to update the owner of the Kitty."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"OwnedKittiesArray"),": to update the owned Kitty map for each account."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"OwnedKittiesIndex"),": to update the owned Kitty index for each owner."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"OwnedKittiesCount"),": to update the amount of Kitties an account has.")),Object(r.mdx)("p",null,"Copy the following to replace ACTION #5:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'// Helper to handle transferring a Kitty from one account to another.\nfn transfer_from(\n    from: T::AccountId,\n    to: T::AccountId,\n    kitty_id: T::Hash,\n) -> DispatchResult {\n    // Verify that the owner is the rightful owner of this Kitty.\n    let owner = Self::owner_of(kitty_id).ok_or("No owner for this kitty")?;\n    ensure!(owner == from, "\'from\' account does not own this kitty");\n\n    // Address to send from.\n    let owned_kitty_count_from = Self::owned_kitty_count(&from);\n\n    // Address to send to.\n    let owned_kitty_count_to = Self::owned_kitty_count(&to);\n\n    // Increment the amount of owned Kitties by 1.\n    let new_owned_kitty_count_to = owned_kitty_count_to\n        .checked_add(1)\n        .ok_or("Transfer causes overflow of \'to\' kitty balance")?;\n\n    // Increment the amount of owned Kitties by 1.\n    let new_owned_kitty_count_from = owned_kitty_count_from\n        .checked_sub(1)\n        .ok_or("Transfer causes underflow of \'from\' kitty balance")?;\n\n    // Get current Kitty index.\n    let kitty_index = <OwnedKittiesIndex<T>>::get(kitty_id);\n\n    // Update storage items that require updated index.\n    if kitty_index != new_owned_kitty_count_from {\n        let last_kitty_id =\n            <OwnedKittiesArray<T>>::get((from.clone(), new_owned_kitty_count_from));\n        <OwnedKittiesArray<T>>::insert((from.clone(), kitty_index), last_kitty_id);\n        <OwnedKittiesIndex<T>>::insert(last_kitty_id, kitty_index);\n    }\n\n    // Write new Kitty ownership to storage items.\n    <KittyOwner<T>>::insert(&kitty_id, Some(&to));\n    <OwnedKittiesIndex<T>>::insert(kitty_id, owned_kitty_count_to);\n\n    <OwnedKittiesArray<T>>::remove((from.clone(), new_owned_kitty_count_from));\n    <OwnedKittiesArray<T>>::insert((to.clone(), owned_kitty_count_to), kitty_id);\n\n    <OwnedKittiesCount<T>>::insert(&from, new_owned_kitty_count_from);\n    <OwnedKittiesCount<T>>::insert(&to, new_owned_kitty_count_to);\n\n    Self::deposit_event(Event::Transferred(from, to, kitty_id));\n\n    Ok(())\n}\n')),Object(r.mdx)("h3",{id:"3-buy-a-kitty"},"3. Buy a Kitty"),Object(r.mdx)("h4",{id:"a-check-a-kitty-is-for-sale"},"A. Check a Kitty is for Sale"),Object(r.mdx)("p",null,"We'll need to ensure 2 things before we can allow the user of this function to purchase a Kitty: first, check that the\nKitty is for sale; and second, check whether the Kitty's current price is within the user's budget."),Object(r.mdx)("p",null,"We can use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"set_price()")," function to check if the Kitty is for sale. Remember that we said a Kitty with the\nprice of ",Object(r.mdx)("inlineCode",{parentName:"p"},"0")," means it's not for sale? Easy enough then: write these checks by simply using ",Object(r.mdx)("inlineCode",{parentName:"p"},"ensure!()")," ","\u2014"," replacing line ACTION #6:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'// Check if the Kitty is for sale.\nensure!(!kitty_price.is_zero(), "This Kitty is not for sale!");\n// Check that the Kitty\'s current price is within buyers budget.\nensure!(\n    kitty_price <= ask_price,\n    "This Kitty is out of your budget!"\n);\n')),Object(r.mdx)("h4",{id:"b-making-a-payment"},"B. Making a Payment"),Object(r.mdx)("p",null,"In ",Object(r.mdx)("a",{parentName:"p",href:"#2-transfer-a-kitty"},"Step 2"),", we added the functions necessary to transfer the ",Object(r.mdx)("em",{parentName:"p"},"ownership")," of our\nKitties. But we never actually specified a currrency associated to our pallet."),Object(r.mdx)("p",null,"In this step we'll learn how to use ",Object(r.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/tokens/currency/index.html"},"FRAME's Currency trait")," to adjust account balances\nusing its very own ",Object(r.mdx)("a",{parentName:"p",href:"https://crates.parity.io/frame_support/traits/tokens/currency/trait.Currency.html#tymethod.transfer"},Object(r.mdx)("inlineCode",{parentName:"a"},"transfer")," method"),". It's useful to understand why it's important to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer")," method in particular and how we'll be accessing it:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"The reason we'll be using it is to ensure our runtime has the same understanding of currency throughout the pallets\nit interacts with. The way that we ensure this is to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Currency")," trait\nfrom ",Object(r.mdx)("inlineCode",{parentName:"p"},"frame_support"),".")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"Conveniently, it handles a\n",Object(r.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/tokens/currency/trait.Currency.html#associatedtype.Balance"},Object(r.mdx)("inlineCode",{parentName:"a"},"Balance"))," type, making it compatible with ",Object(r.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/pallet_balances/index.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"pallet_balances"))," which we've been\nusing in our pallet's configuration trait. Take a look at how the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer"),"\nfunction we'll be using is structured (from the ",Object(r.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/tokens/currency/trait.Currency.html#tymethod.transfer"},"Rust docs"),"):"))),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"fn transfer(\n    source: &AccountId,\n    dest: &AccountId,\n    value: Self::Balance,\n    existence_requirement: ExistenceRequirement\n) -> DispatchResult\n")),Object(r.mdx)("p",null,"Now we can finally make use of the  ",Object(r.mdx)("inlineCode",{parentName:"p"},"frame_support")," imports ","\u2013"," ",Object(r.mdx)("inlineCode",{parentName:"p"},"Currency")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"ExistenceRequirement")," ","\u2013"," that we\n",Object(r.mdx)("a",{parentName:"p",href:"/docs/tutorials/Kitties/Part%201/basic-setup#2-write-out-pallet_kitties-scaffold"},"initially started with in Part I"),"."),Object(r.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Feeling confident?")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"Here's how you would write ",Object(r.mdx)("inlineCode",{parentName:"p"},"buy_Kitty")," from scratch."),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Perform basic sanity checks"),":"),Object(r.mdx)("ul",{parentName:"div"},Object(r.mdx)("li",{parentName:"ul"},"it will take 3 arguments: ",Object(r.mdx)("inlineCode",{parentName:"li"},"origin"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"Kitty_id")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"max_price")),Object(r.mdx)("li",{parentName:"ul"},"check that ",Object(r.mdx)("inlineCode",{parentName:"li"},"Kitty_id")," corresponds to a Kitty in storage"),Object(r.mdx)("li",{parentName:"ul"},"check that the Kitty has an owner")),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Check if purchasing a Kitty is authorized"),":"),Object(r.mdx)("ul",{parentName:"div"},Object(r.mdx)("li",{parentName:"ul"},"check that the account buying the Kitty doesn't already own it"),Object(r.mdx)("li",{parentName:"ul"},"check that the price of the Kitty is not zero (if it is, throw an error)"),Object(r.mdx)("li",{parentName:"ul"},"check that the Kitty price is not greater than ",Object(r.mdx)("inlineCode",{parentName:"li"},"ask_price"))),Object(r.mdx)("p",{parentName:"div"},Object(r.mdx)("strong",{parentName:"p"},"Update storage items"),":"),Object(r.mdx)("ul",{parentName:"div"},Object(r.mdx)("li",{parentName:"ul"},"use the ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer")," method from the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Currency")," trait to update\naccount balances"),Object(r.mdx)("li",{parentName:"ul"},"use our pallet's ",Object(r.mdx)("inlineCode",{parentName:"li"},"transfer_from")," function to change the ownership\nof the Kitty from ",Object(r.mdx)("inlineCode",{parentName:"li"},"owner")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"sender")),Object(r.mdx)("li",{parentName:"ul"},"update the price of the Kitty to the price it was sold at")))),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Your turn!")," Paste in the following code snippet, replacing ACTION #6:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"<pallet_balances::Pallet<T> as Currency<_>>::transfer(\n      &sender,\n      &owner,\n      kitty_price,\n      ExistenceRequirement::KeepAlive,\n  )?;\n")),Object(r.mdx)("p",null,"Now that that the ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer")," method from FRAME's Currency trait has been called, we can call a private helper function\ncalled ",Object(r.mdx)("inlineCode",{parentName:"p"},"transfer_from")," (which we'll write later) to write the new changes in ownership to storage. Replace this with what's on\nline ACTION #7:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'// Transfer ownership of Kitty.\nSelf::transfer_from(owner.clone(), sender.clone(), kitty_id).expect(\n    "`owner` is shown to own the kitty; \\\n    `owner` must have greater than 0 kitties, so transfer cannot cause underflow; \\\n    `all_kitty_count` shares the same type as `owned_kitty_count` \\\n    and minting ensure there won\'t ever be more than `max()` kitties, \\\n    which means transfer cannot cause an overflow; \\\n    qed",\n);\n\n// Set the price of the Kitty to the new price it was sold at.\nkitty.price = ask_price.into();\n<Kitties<T>>::insert(kitty_id, kitty);\n')),Object(r.mdx)("h3",{id:"4-breed-kitties"},"4. Breed Kitties"),Object(r.mdx)("p",null,"The logic behind breeding two Kitties is to multiply each corresponding DNA segment from two Kitties,\nwhich will produce a new DNA sequence. Then, that DNA is used when minting a new Kitty. "),Object(r.mdx)("p",null,"Paste in the following to complete the ",Object(r.mdx)("inlineCode",{parentName:"p"},"breed_kitty")," function, replacing line ACTION #8:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"    let random_hash = Self::random_hash(&sender);\n    let kitty_1 = Self::kitty(kitty_id_1);\n    let kitty_2 = Self::kitty(kitty_id_2);\n\n    let mut final_dna = kitty_1.dna;\n    for (i, (dna_2_element, r)) in kitty_2\n        .dna\n        .as_ref()\n        .iter()\n        .zip(random_hash.as_ref().iter())\n        .enumerate()\n    {\n        if r % 2 == 0 {\n            final_dna.as_mut()[i] = *dna_2_element;\n        }\n    }\n")),Object(r.mdx)("p",null,"Now that we've used the user inputs of Kitty IDs and combined them to create a new unique Kitty ID, we can\nuse the ",Object(r.mdx)("inlineCode",{parentName:"p"},"mint()")," function to write that new Kitty to storage. Replace line ACTION #9:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"let new_kitty = Kitty {\n    id: random_hash,\n    dna: final_dna,\n    price: 0u8.into(),\n    gender: Kitty::<T, T>::gender(final_dna),\n};\n\nSelf::mint(sender, random_hash, new_kitty)?;\nSelf::increment_nonce()?;\n")),Object(r.mdx)("p",null,"And of course, after calling the ",Object(r.mdx)("inlineCode",{parentName:"p"},"mint")," function, we call ",Object(r.mdx)("inlineCode",{parentName:"p"},"increment_nonce()")," to maintain maximum entropy as described in ",Object(r.mdx)("a",{parentName:"p",href:"/docs/tutorials/Kitties/Part%201/create-kitties#nonce"},"Part II"),"."),Object(r.mdx)("p",null,"//TODO : Write relevant Errors "),Object(r.mdx)("h3",{id:"5-genesis-configuration"},"5. Genesis configuration"),Object(r.mdx)("p",null,"The final step before our pallet is ready to be used is to set the genesis state of our storage items. We'll make use of\nFRAME's ",Object(r.mdx)("inlineCode",{parentName:"p"},"[pallet::genesis_config]")," to do this. Essentially, we're declaring what the Kitties object in storage contains\nin the genesis block. Copy the following code to replace ACTION #11: "),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},'// Our pallet\'s genesis configuration.\n#[pallet::genesis_config]\npub struct GenesisConfig<T: Config> {\n    pub kitties: Vec<(T::AccountId, T::Hash, T::Balance)>,\n}\n\n// Required to implement default for GenesisConfig.\n#[cfg(feature = "std")]\nimpl<T: Config> Default for GenesisConfig<T> {\n    fn default() -> GenesisConfig<T> {\n        GenesisConfig { kitties: vec![] }\n    }\n}\n\n#[pallet::genesis_build]\nimpl<T: Config> GenesisBuild<T> for GenesisConfig<T> {\n    fn build(&self) {\n        for &(ref acct, hash, balance) in &self.kitties {\n            let k = Kitty {\n                id: hash,\n                dna: hash,\n                price: balance,\n                gender: Gender::Male,\n            };\n\n            let _ = <Pallet<T>>::mint(acct.clone(), hash, k);\n        }\n    }\n}\n')),Object(r.mdx)("h3",{id:"8-update-runtimelibrs-and-interact-with-your-kitties"},"8. Update ",Object(r.mdx)("inlineCode",{parentName:"h3"},"runtime/lib.rs")," and interact with your Kitties"),Object(r.mdx)("p",null,"If you've completed all of the preceding parts and steps of this tutorial, you're\nall geared up to run your chain and start interacting with all the new capabilities of your Kitties pallet."),Object(r.mdx)("p",null,"Build and run your chain using the following commands:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-bash"},"cargo build --release\n./target/release/node-kitties --dev\n")),Object(r.mdx)("p",null,"Now check your work using the Polkadot-JS Apps UI just like ",Object(r.mdx)("a",{parentName:"p",href:"/docs/Tutorials/Kitties/Part%201/dispatchables-and-events#5-testing-with-polkadotjs-apps"},"we did in the previous part"),". Once your chain is running and connected to the PolkadotJS Apps UI, perform these manual checks:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Fund multiple users with tokens so they can all participate"),Object(r.mdx)("li",{parentName:"ul"},"Have each user create multiple Kitties"),Object(r.mdx)("li",{parentName:"ul"},"Try to transfer a Kitty from one user to another using the right and wrong owner"),Object(r.mdx)("li",{parentName:"ul"},"Try to set the price of a Kitty using the right and wrong owner"),Object(r.mdx)("li",{parentName:"ul"},"Buy a Kitty using an owner and another user"),Object(r.mdx)("li",{parentName:"ul"},"Use too little funds to purchase a Kitty"),Object(r.mdx)("li",{parentName:"ul"},"Overspend on the cost of the Kitty and ensure that the balance is reduced appropriately"),Object(r.mdx)("li",{parentName:"ul"},"Breed a Kitty and check that the new DNA is a mix of the old and new")),Object(r.mdx)("p",null,"After all of these actions, confirm that all users have the right number of Kitties, the total Kitty count is correct, and any other storage variables are correctly represented"),Object(r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Congratulations!")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"You've successfully created the backend of a fully functional Substrate chain capable of creating and managing Substrate Kitties. It could also be abstracted to other NFT-like use cases. Most importantly, at this point in the tutorial you should have all the knowledge you need to start creating your own pallet logic and dispatchable functions."))),Object(r.mdx)("h2",{id:"next-steps"},"Next steps"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Connect your chain to the front-end template"),Object(r.mdx)("li",{parentName:"ul"},"Customize the template using PolkadotJS API"),Object(r.mdx)("li",{parentName:"ul"},"Interact with your chain")))}d.isMDXComponent=!0}}]);