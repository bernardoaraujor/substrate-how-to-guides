(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{186:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return x})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),m=function(e){return function(t){var n=p(t.components);return i.a.createElement(e,r({},t,{components:n}))}},p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,u=l["".concat(r,".").concat(m)]||l[m]||h[m]||o;return n?i.a.createElement(u,d(d({ref:t},s),{},{components:n})):i.a.createElement(u,d({ref:t},s))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=b;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},45:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return l}));var a=n(3),i=n(8),o=(n(0),n(186)),r={sidebar_position:4,keywords:"pallet design, intermediate, runtime"},s={unversionedId:"tutorials/Kitties/Part 1/dispatchables-and-events",id:"tutorials/Kitties/Part 1/dispatchables-and-events",isDocsHomePage:!1,title:"Dispatchables, Events and Errors",description:"Write a dispatchable function that creates a Kitty capable of emitting its associated Event.",source:"@site/docs/09-tutorials/01-Kitties/Part 1/dispatchables-and-events.md",sourceDirName:"09-tutorials/01-Kitties/Part 1",slug:"/tutorials/Kitties/Part 1/dispatchables-and-events",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 1/dispatchables-and-events",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/09-tutorials/01-Kitties/Part 1/dispatchables-and-events.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,keywords:"pallet design, intermediate, runtime"},sidebar:"tutorialSidebar",previous:{title:"Uniqueness, custom types and storage maps",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 1/create-kitties"},next:{title:"Interacting with your Kitties",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 1/interacting-functions"}},d=[{value:"Overview",id:"overview",children:[]},{value:"Learning outcomes",id:"learning-outcomes",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Public and private functions",id:"1-public-and-private-functions",children:[]},{value:"2. Write the <code>create_kitty</code> dispatchable",id:"2-write-the-create_kitty-dispatchable",children:[]},{value:"3. Write the <code>mint()</code> function",id:"3-write-the-mint-function",children:[]},{value:"4. Implement pallet Events",id:"4-implement-pallet-events",children:[]},{value:"5. Error handling",id:"5-error-handling",children:[]},{value:"6. Testing with PolkadotJS Apps",id:"6-testing-with-polkadotjs-apps",children:[]}]},{value:"Next steps",id:"next-steps",children:[]}],c={toc:d};function l(e){var t=e.components,n=Object(i.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(a.default)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"Write a dispatchable function that creates a Kitty capable of emitting its associated Event.")),Object(o.mdx)("h2",{id:"overview"},"Overview"),Object(o.mdx)("p",null,"In the previous section of this tutorial, we laid down the foundations geared to manage the ownership of our Kitties ","\u2014"," even though they don't really exist yet! In this part of the tutorial, we'll be putting these foundations to use\nby giving our pallet the ability to create a Kitty using the storage items we declared in the previous part. Breaking things down a little, we're going to:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},"Write ",Object(o.mdx)("inlineCode",{parentName:"strong"},"create_kitty")),": a dispatchable or publicly callable function allowing an account to mint a Kitty."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},"Write ",Object(o.mdx)("inlineCode",{parentName:"strong"},"mint()")),": a helper function that updates our pallet's storage items and performs error checks, called by ",Object(o.mdx)("inlineCode",{parentName:"li"},"create_kitty"),"."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},"Include ",Object(o.mdx)("inlineCode",{parentName:"strong"},"Events")),": using FRAME's ",Object(o.mdx)("inlineCode",{parentName:"li"},"#[pallet::events]")," macro.")),Object(o.mdx)("p",null,"At the end of this part, we'll check that everything compiles without error and call our ",Object(o.mdx)("inlineCode",{parentName:"p"},"create_kitty")," extrinsic using the PolkadotJS Apps UI."),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},'If you\'re feeling confident, you can continue building on your codebase from the previous part.\nIf you prefer using the "ACTION" items as a way to assist you through each step, replace the code from the\nPart II with ',Object(o.mdx)("a",{parentName:"p",href:"https://github.com/substrate-developer-hub/substrate-how-to-guides/blob/main/static/code/kitties-tutorial/03-dispatchables-and-events.rs"},"this part's helper code"),"."))),Object(o.mdx)("h2",{id:"learning-outcomes"},"Learning outcomes"),Object(o.mdx)("p",null,"\u27a1\ufe0f Write a dispatchable function that updates storage items using a helper function."),Object(o.mdx)("p",null,"\u27a1\ufe0f Write a private helper function with error handling"),Object(o.mdx)("p",null,"\u27a1\ufe0f Write and use pallet Events and Errors."),Object(o.mdx)("p",null,"\u27a1\ufe0f Use PolkadotJS Apps UI to test pallet functionality."),Object(o.mdx)("h2",{id:"steps"},"Steps"),Object(o.mdx)("h3",{id:"1-public-and-private-functions"},"1. Public and private functions"),Object(o.mdx)("p",null,"Before we dive right in, it's important to understand the pallet design decisions we'll be making around coding up our Kitty pallet's minting and ownership management\ncapabilities."),Object(o.mdx)("p",null,"As developers, we want to make sure the code we write is efficient and elegant. Oftentimes, optimizing for one optimizes for the other.\nThe way we're going to set up our pallet to optimize for both will be to break-up the \"heavy lifting\" dispatchable\nfunctions into private helper functions. This improves code readability and reusability too. As we'll see, we can\ncreate private functions which can be called by multiple dispatchable functions without compromizing on security. In fact, building this way can be considered an additive security feauture."),Object(o.mdx)("div",{className:"admonition admonition-info alert alert--info"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"Check out ",Object(o.mdx)("a",{parentName:"p",href:"/docs/basics/helper-functions/"},"this how-to guide")," about writing and using helper functions to learn more."))),Object(o.mdx)("p",null,"Before jumping into implementing this approach, let's first paint the big picture of what combining dispatchables and helper functions looks like:"),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},Object(o.mdx)("inlineCode",{parentName:"strong"},"create_kitty"))," (dispatchable function)"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"check the origin is signed"),Object(o.mdx)("li",{parentName:"ul"},"generate a random hash with the signing account"),Object(o.mdx)("li",{parentName:"ul"},"create a new Kitty object using the random hash"),Object(o.mdx)("li",{parentName:"ul"},"call a private ",Object(o.mdx)("inlineCode",{parentName:"li"},"mint()")," function"),Object(o.mdx)("li",{parentName:"ul"},"increment the nonce using ",Object(o.mdx)("inlineCode",{parentName:"li"},"increment_nonce()")," from ",Object(o.mdx)("a",{parentName:"li",href:"/docs/tutorials/Kitties/Part%201/create-kitties#nonce"},"Part II"))),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},Object(o.mdx)("inlineCode",{parentName:"strong"},"mint"))," (private helper function)"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"check that the Kitty doesn't already exist"),Object(o.mdx)("li",{parentName:"ul"},"update storage with the new Kitty ID (for all Kitties and for the owner's account)"),Object(o.mdx)("li",{parentName:"ul"},"update the new total Kitty count for storage and the new owner's account"),Object(o.mdx)("li",{parentName:"ul"},"deposit an Event to signal that a Kitty has succesfully been created")),Object(o.mdx)("h3",{id:"2-write-the-create_kitty-dispatchable"},"2. Write the ",Object(o.mdx)("inlineCode",{parentName:"h3"},"create_kitty")," dispatchable"),Object(o.mdx)("p",null,"A ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/getting-started/glossary#dispatch"},"dispatchable")," in FRAME always follows the same structure. All pallet dispatchables live under the ",Object(o.mdx)("inlineCode",{parentName:"p"},"#[pallet::call]")," macro which requires declaring the dispatchables section with ",Object(o.mdx)("inlineCode",{parentName:"p"}," impl<T: Config> Pallet<T> {}"),". Read the\n",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/runtime/macros#palletcall"},"documentation")," on these FRAME macros to learn how they work. All we need to know here is that they're a useful feature of FRAME that minimizes the code required to write for pallets to be properly integrated in a Substrate chain's runtime."),Object(o.mdx)("h4",{id:"weights"},"Weights"),Object(o.mdx)("p",null,"As per the requirement for ",Object(o.mdx)("inlineCode",{parentName:"p"},"#[pallet::call]")," described in the its documentation, every dispatchable function must have an associated weight to it. Weights are\nan important part of developing with Substrate as they provide safe-guards around the amount of computation to fit in a block at execution time.\n",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/learn-substrate/weight"},"Substrate's weighting system")," forces developers to think about the computational complexity each ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/runtime/execution#executing-extrinsics"},"extrinsic")," carries before it is called so that\na node will account for it's worst case, avoiding lagging the network with extrinsics that may take longer than the specified block time. Weights are also intimately linked to the ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/runtime/fees"},"fee system")," for a signed extrinsic."),Object(o.mdx)("p",null,"For this simple application, we're going to default all weights to 100."),Object(o.mdx)("p",null,"Find ACTION #1 and replace it with the following code:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"#[pallet::weight(100)]\npub fn create_kitty(origin: OriginFor<T>) -> DispatchResultWithPostInfo {\n    let sender = ensure_signed(origin)?;\n    let random_hash = Self::random_hash(&sender);\n\n    let new_kitty = Kitty {\n        id: random_hash,\n        dna: random_hash,\n        price: 0u8.into(),\n        gender: Kitty::<T, T>::gender(random_hash),\n    };\n\n    Self::mint(sender, random_hash, new_kitty)?;\n    Self::increment_nonce()?;\n\n    Ok(().into())\n}\n")),Object(o.mdx)("h3",{id:"3-write-the-mint-function"},"3. Write the ",Object(o.mdx)("inlineCode",{parentName:"h3"},"mint()")," function"),Object(o.mdx)("p",null,"As seen when we wrote ",Object(o.mdx)("inlineCode",{parentName:"p"},"create_kitty")," in the previous section, we'll need to create ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint()")," for\nwriting our new unique Kitty object to the various storage items declared in Part II of this tutorial."),Object(o.mdx)("p",null,"Let's get right to it. Our ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint()")," function will take the following arguments:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"to")),": of type ",Object(o.mdx)("inlineCode",{parentName:"li"},"T::AccountId")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"kitty_id")),": of type ",Object(o.mdx)("inlineCode",{parentName:"li"},"T::Hash")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"new_kitty")),": of type ",Object(o.mdx)("inlineCode",{parentName:"li"},"Kitty<T::Hash, T::Balance>"))),Object(o.mdx)("p",null,"And it will return ",Object(o.mdx)("inlineCode",{parentName:"p"},"DispatchResult"),"."),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),'Why "DispatchResult" and not "DispatchResultWithPostInfo" ?')),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"In ",Object(o.mdx)("inlineCode",{parentName:"p"},"create_kitty")," our return was of type ",Object(o.mdx)("inlineCode",{parentName:"p"},"DispatchResultWithPostInfo"),". Since ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint()")," is a helper for ",Object(o.mdx)("inlineCode",{parentName:"p"},"create_kitty"),", we don't need to overwrite ",Object(o.mdx)("inlineCode",{parentName:"p"},"PostDispatchInfo"),",\nso we can use a return type of ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/dispatch/type.DispatchResult.html"},Object(o.mdx)("inlineCode",{parentName:"a"},"DispatchResult"))," ","\u2014"," its unaugmented version."))),Object(o.mdx)("p",null,"Paste in the following code snippet to write the beginning of the ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint")," function, replacing ACTION #2 in the working codebase:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},'// Helper to mint a Kitty.\nfn mint(\n    to: T::AccountId,\n    kitty_id: T::Hash,\n    new_kitty: Kitty<T::Hash, T::Balance>,\n) -> DispatchResult {\n    ensure!(\n        !<KittyOwner<T>>::contains_key(kitty_id),\n        "Kitty already contains_key"\n    );\n    // Update total Kitty counts.\n    let owned_kitty_count = Self::owned_kitty_count(&to);\n    let new_owned_kitty_count = owned_kitty_count\n        .checked_add(1)\n        .ok_or("Overflow adding a new kitty to account balance")?;\n\n    let all_kitties_count = Self::all_kitties_count();\n    let new_all_kitties_count = all_kitties_count\n        .checked_add(1)\n        .ok_or("Overflow adding a new kitty to total supply")?;\n\n    // Update storage with new Kitty.\n    <Kitties<T>>::insert(kitty_id, new_kitty);\n    <KittyOwner<T>>::insert(kitty_id, Some(&to));\n\n    // Write Kitty counting information to storage.\n    <AllKittiesArray<T>>::insert(new_all_kitties_count, kitty_id);\n    <AllKittiesCount<T>>::put(new_all_kitties_count);\n    <AllKittiesIndex<T>>::insert(kitty_id, new_all_kitties_count);\n\n    // Write Kitty counting information to storage.\n    <OwnedKittiesArray<T>>::insert((to.clone(), new_owned_kitty_count), kitty_id);\n    <OwnedKittiesCount<T>>::insert(&to, new_owned_kitty_count);\n    <OwnedKittiesIndex<T>>::insert(kitty_id, new_owned_kitty_count);\n')),Object(o.mdx)("p",null,"Let's go over what the above code is doing."),Object(o.mdx)("p",null,"The first thing we're doing is to check whether the Kitty being passed in doesn't already exist. To accomplish this, we use the built-in ",Object(o.mdx)("inlineCode",{parentName:"p"},"ensure!")," macro that Rust provides us, along with\na method provided by FRAME's ",Object(o.mdx)("inlineCode",{parentName:"p"},"StorageMap")," called ",Object(o.mdx)("inlineCode",{parentName:"p"},"contains_key"),"."),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"}," ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/storage/trait.StorageMap.html#tymethod.contains_key"},Object(o.mdx)("inlineCode",{parentName:"a"},"contains_key"))," will check if a key matches the Hash value in an existing Kitty object. And ",Object(o.mdx)("inlineCode",{parentName:"p"},"ensure!")," will return an error if the storage map already\ncontains the given Kitty ID."))),Object(o.mdx)("p",null,"Once we've done the check, we proceed with updating our storage items with the Kitty object passed into our function call. To do this, we make use of\nthe ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/storage/trait.StorageMap.html#tymethod.insert"},Object(o.mdx)("inlineCode",{parentName:"a"},"insert"))," method from our StorageMap API, using the following pattern:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"<SomeStorageMapStruct<T>>::insert(some_key, new_key);\n")),Object(o.mdx)("p",null,"Finally, we compute a few variables to update our storage items that keep track of:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"The indices and count ",Object(o.mdx)("strong",{parentName:"li"},"for all")," Kitties."),Object(o.mdx)("li",{parentName:"ul"},"The indices and count ",Object(o.mdx)("strong",{parentName:"li"},"of owned")," Kitties.")),Object(o.mdx)("p",null,"All this requires us to do is add 1 to the current values held by ",Object(o.mdx)("inlineCode",{parentName:"p"},"<AllKittiesCount<T>>")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"<OwnedKittiesCount<T>>"),". We can use the same pattern as we did in the previous part ",Object(o.mdx)("a",{parentName:"p",href:"/docs/tutorials/Kitties/Part%201/create-kitties#nonce"},"when we created ",Object(o.mdx)("inlineCode",{parentName:"a"},"increment_nonce")),", using Rust's ",Object(o.mdx)("inlineCode",{parentName:"p"},"checked_add")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"ok_or"),". Generically, this looks like:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},'let new_value = previous_value.checked_add(1).ok_or("Overflow error!");\n')),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"A quick recap of our storage items")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("ul",{parentName:"div"},Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<Kitties<T>>")),": Stores a Kitty's unique traits and price, by storing the Kitty object."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<KittyOwner<T>>")),": Keeps track of what accounts own what Kitty."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<AllKittiesArray<T>>")),": An index to track of all Kitties."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<AllKittiesCount<T>>")),": Stores the total amount of Kitties in existence."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<AllKittiesIndex<T>>")),": Keeps track of all the Kitties."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<OwnedKittiesArray<T>>")),": Keep track of who a Kitty is owned by."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<OwnedKittiesCount<T>>")),": Keeps track of the total amount of Kitties owned."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},Object(o.mdx)("inlineCode",{parentName:"strong"},"<OwnedKittiesIndex<T>>")),": Keeps track of all owned Kitties by index.")))),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"There's 8 storage items in total and each type of storage exposes a number of different methods.\nHave a glance at the ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/storage/types/struct.StorageValue.html#method.put"},"methods ",Object(o.mdx)("inlineCode",{parentName:"a"},"StorageValue"))," and ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/storage/types/struct.StorageMap.html#method.insert"},Object(o.mdx)("inlineCode",{parentName:"a"},"StorageMap")," expose")," to learn more."))),Object(o.mdx)("h3",{id:"4-implement-pallet-events"},"4. Implement pallet Events"),Object(o.mdx)("p",null,"In Substrate, even though a transaction may be finalized, it does not necessarily imply that the function executed by that\ntransaction fully succeeded. To verify this, we make our pallet emit an ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/runtime/events"},"Event"),' at the end of the function. This not only\nreports the success of a function\'s execution, but also tells the "off-chain world" that some particular state transition has happened.'),Object(o.mdx)("p",null,"FRAME helps us easily manage and declare our pallet's events using the ",Object(o.mdx)("a",{parentName:"p",href:"https://crates.parity.io/frame_support/attr.pallet.html#event-palletevent-optional"},Object(o.mdx)("inlineCode",{parentName:"a"},"#[pallet::event]"))," macro. With FRAME macros, events are just an enum declared like this:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"#[pallet::event]\n#[pallet::generate_deposit(pub(super) fn deposit_event)]\npub enum Event<T: Config>{\n    /// A function succeeded. [time, day]\n    Success(T::Time, T::Day),\n}\n")),Object(o.mdx)("p",null,"As you can see in the above snippet, we use:"),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"#[pallet::generate_deposit(pub(super) fn deposit_event)]")," "),Object(o.mdx)("p",null,"This allows us to deposit a specifc event using the pattern below:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"Self::deposit_event(Event::Success(var_time, var_day));\n")),Object(o.mdx)("p",null,"In order to use events inside our pallet, we need to have the ",Object(o.mdx)("inlineCode",{parentName:"p"},"Event")," type declared inside our pallet's configuration trait, ",Object(o.mdx)("inlineCode",{parentName:"p"},"Config"),". Additionally ","\u2014"," just as\nwhen adding any type to our pallet's ",Object(o.mdx)("inlineCode",{parentName:"p"},"Config")," trait ","\u2014"," we need to let our runtime know about it. "),Object(o.mdx)("p",null,"This pattern is the same as when\nwe added the ",Object(o.mdx)("inlineCode",{parentName:"p"},"KittyRandomness")," type in ",Object(o.mdx)("a",{parentName:"p",href:"/docs/Tutorials/Kitties/Part%201/create-kitties#3-implement-on-chain-randomness"},"Part II of this tutorial")," and has already been included from the initial scaffolding of our codebase: "),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"  /// Configure the pallet by specifying the parameters and types it depends on.\n  #[pallet::config]\n  pub trait Config: pallet_balances::Config + frame_system::Config {\n      /// Because this pallet emits events, it depends on the runtime's definition of an event.\n      type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;\n      //--snip--//\n  }\n")),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Notice that each event deposit is meant to be informative which is why it carries the various types associated with it.")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"It's good practice to get in the habit of documenting your event declarations so that your code is easy to read. It is convention to document events as such:"),Object(o.mdx)("p",{parentName:"div"},Object(o.mdx)("inlineCode",{parentName:"p"},"/// Description. [types]")),Object(o.mdx)("p",{parentName:"div"},"Learn more about events ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/runtime/events"},"here"),"."))),Object(o.mdx)("p",null,"Declare your pallet events by replacing the ACTION #3 line with:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"Created(T::AccountId, T::Hash),\nPriceSet(T::AccountId, T::Hash, T::Balance),\nTransferred(T::AccountId, T::AccountId, T::Hash),\nBought(T::AccountId, T::AccountId, T::Hash, T::Balance),\n")),Object(o.mdx)("p",null,"We'll be using most of these events in Part IV of this tutorial. For now let's use the relevant event for our ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint")," function."),Object(o.mdx)("p",null,"In order to complete our ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint")," function, replace the ACTION #4 line with:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"Self::deposit_event(Event::Created(to, kitty_id));\n")),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"If you're building your codebase from the previous part (and haven't been using the helper file for this part) you'll need to add ",Object(o.mdx)("inlineCode",{parentName:"p"},"Ok(())")," and properly close the ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint")," function."))),Object(o.mdx)("h3",{id:"5-error-handling"},"5. Error handling"),Object(o.mdx)("p",null,"In ",Object(o.mdx)("a",{parentName:"p",href:"/docs/tutorials/Kitties/Part%201/create-kitties#nonce"},"Part II when we created the ",Object(o.mdx)("inlineCode",{parentName:"a"},"increment_nonce"))," function, we specified the error message ",Object(o.mdx)("em",{parentName:"p"},'"Overflow"')," using Rust's ",Object(o.mdx)("inlineCode",{parentName:"p"},"ok_or")," function.\nFRAME provides us with an error handling system using ",Object(o.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/runtime/errors"},Object(o.mdx)("inlineCode",{parentName:"a"},"[#pallet::errors]"))," which allows us to specify errors for our pallet and use them across our pallet's functions. "),Object(o.mdx)("p",null,"In this case, let's declare a single error for when checking for overflow in the ",Object(o.mdx)("inlineCode",{parentName:"p"},"increment_nonce")," function. "),Object(o.mdx)("p",null,"First, declare the error using the provided FRAME macro under ",Object(o.mdx)("inlineCode",{parentName:"p"},"#[pallet::error]")," (replace line ACTION #5a):"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"/// Nonce has overflowed past u64 limits\nNonceOverflow,\n")),Object(o.mdx)("p",null,"Then, use it on ",Object(o.mdx)("inlineCode",{parentName:"p"},"ok_or")," inside ",Object(o.mdx)("inlineCode",{parentName:"p"},"increment_nonce")," (replace line ACTION #5b):"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"let next = nonce.checked_add(1).ok_or(Error::<T>::NonceOverflow)?;\n")),Object(o.mdx)("p",null,"Now's a good time to see if your chain can compile. Instead of only checking if your pallet compiles, run the following command to see if everything can build:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"cargo +nightly build --release\n")),Object(o.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"If you ran into errors, scroll to the first error message in your terminal, identify what line\nis giving an error and check whether you've\nfollowed each step correctly. Sometimes a mismatch of curly brackets will unleash a whole bunch\nof errors that are difficult to understand ","\u2014"," double check your code!"))),Object(o.mdx)("p",null,"Did that build fine? Congratulations! That's the core functionality of our Kitties pallet. In the next step you'll be able to\nsee everything you've built so far in action."),Object(o.mdx)("h3",{id:"6-testing-with-polkadotjs-apps"},"6. Testing with PolkadotJS Apps"),Object(o.mdx)("p",null,"Assuming that you successfully built your chain, let's run it and use the ",Object(o.mdx)("a",{parentName:"p",href:"https://polkadot.js.org/apps/#/explorer"},"PolkadotJS Apps UI")," to interact with it."),Object(o.mdx)("p",null,"In your chain's project directory, run:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-bash"},"./target/release/node-kitties --tmp --dev\n")),Object(o.mdx)("p",null,"By doing this, we're specifying to run a temporary chain in developer mode, so as not to need to purge storage each time we want to start a fresh chain."),Object(o.mdx)("p",null,"Assuming that blocks are being finalized (which you should be able to see from your terminal in which you ran the above command), head over to ",Object(o.mdx)("a",{parentName:"p",href:"https://polkadot.js.org/apps/#/explorer"},"Poladot.js Apps"),"."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Follow these steps:")),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},'Check that you\'re connected to Local Node, under "Development". Your node will default to ',Object(o.mdx)("inlineCode",{parentName:"li"},"127.0.0.1.:9944"),"."),Object(o.mdx)("li",{parentName:"ol"},'Tell the UI about your custom types.\nThis requires you to paste them into the "',Object(o.mdx)("em",{parentName:"li"},"Settings"),'" -> "',Object(o.mdx)("em",{parentName:"li"},"Developers"),'" section.'),Object(o.mdx)("li",{parentName:"ol"},'Go to "',Object(o.mdx)("em",{parentName:"li"},"Developer"),'" -> "',Object(o.mdx)("em",{parentName:"li"},"Extrinsics"),'". Paste this in the JSON code editor:')),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "AccountInfo": {\n    "nonce": "Index",\n    "consumers": "RefCount",\n    "providers": "RefCount",\n    "data": "AccountData"\n  },\n  "Address": "MultiAddress",\n  "LookupSource": "AccountId",\n  "Gender": {\n    "_enum": ["male", "female"]\n  },\n  "Kitty": {\n    "id": "H256",\n    "dna": "H256",\n    "price": "Balance",\n    "gender": "Gender"\n  }\n}\n')),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"The reason we need this is because we created types that PolkadotJS Apps isn't designed to read by default. By adding them, it can\nproperly decode each of our storage items that rely on custom types.")),Object(o.mdx)("ol",{start:3},Object(o.mdx)("li",{parentName:"ol"},"Now go to: ",Object(o.mdx)("em",{parentName:"li"},'"Developer"')," -> ",Object(o.mdx)("em",{parentName:"li"},'"Extrinsics"')," and submit a signed extrinsic using ",Object(o.mdx)("em",{parentName:"li"},"substrateKitties")," by calling the ",Object(o.mdx)("inlineCode",{parentName:"li"},"createKitty()")," dispatchable. Make 3 different transactions from Alice, Bob and Charlie's accounts"),Object(o.mdx)("li",{parentName:"ol"},"Check for the associated event ",Object(o.mdx)("em",{parentName:"li"},'"Created"'),' by going to "',Object(o.mdx)("em",{parentName:"li"},"Network"),'" -> "',Object(o.mdx)("em",{parentName:"li"},"Explorer"),'". You should be able to see the event emitted and query its block details.'),Object(o.mdx)("li",{parentName:"ol"},"Check your newly created Kitty's details by going to \"",Object(o.mdx)("em",{parentName:"li"},"Developer"),'" -> "',Object(o.mdx)("em",{parentName:"li"},"Chain State"),'". Select the ',Object(o.mdx)("em",{parentName:"li"},"substrateKitties")," pallet and query ",Object(o.mdx)("inlineCode",{parentName:"li"},"Kitties(Hash): Kitty"),". ",Object(o.mdx)("strong",{parentName:"li"},"Note:")," You'll notice that this is actually querying all of your pallet's storage items!")),Object(o.mdx)("p",null,'Be sure to uncheck the "include option" box and you should be able to see the details of your newly minted Kitty in the following format:'),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-json"},"substrateKitties.kitties: Kitty\n[\n    [\n      0xf78c3e9c10498c350d639a10fa773cb878b85bf2c5989e38f8b1cd5c0bafb7ee\n    ],\n    {\n      id: 0xf78c3e9c10498c350d639a10fa773cb878b85bf2c5989e38f8b1cd5c0bafb7ee,\n      dna: 0xf78c3e9c10498c350d639a10fa773cb878b85bf2c5989e38f8b1cd5c0bafb7ee,\n      price: 0,\n      gender: female\n    }\n  ],\n")),Object(o.mdx)("ol",{start:5},Object(o.mdx)("li",{parentName:"ol"},"Check that other storage items correctly reflect the creation of additional Kitties.")),Object(o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Congratulations!")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"You're pretty much able to take it from here at this point! We've learnt how to implement the key parts of what powers a FRAME pallet and how to put them to use. All part IV of this tutorial covers is adding more capabilities to our pallet by taking what we've learnt in this part."),Object(o.mdx)("p",{parentName:"div"},"To recap, in this part of the tutorial you've learnt how to:"),Object(o.mdx)("ul",{parentName:"div"},Object(o.mdx)("li",{parentName:"ul"},"Distinguish between implementing a dispatchable function and a private helper function."),Object(o.mdx)("li",{parentName:"ul"},"Use ",Object(o.mdx)("inlineCode",{parentName:"li"},"#[pallet::call]"),", ",Object(o.mdx)("inlineCode",{parentName:"li"},"#[pallet::events]")," and ",Object(o.mdx)("inlineCode",{parentName:"li"},"#[pallet::error]"),"."),Object(o.mdx)("li",{parentName:"ul"},"Implement basic error checking with FRAME."),Object(o.mdx)("li",{parentName:"ul"},"Update values in storage with safety checks."),Object(o.mdx)("li",{parentName:"ul"},"Implement FRAME events and use them in a function."),Object(o.mdx)("li",{parentName:"ul"},"Query storage items and chain state using the PolkadotJS Apps UI.")))),Object(o.mdx)("h2",{id:"next-steps"},"Next steps"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Create a dispatchable to buy a Kitty"),Object(o.mdx)("li",{parentName:"ul"},"Create a dispatchable to transfer a Kitty"),Object(o.mdx)("li",{parentName:"ul"},"Create a dispatchable to breed two Kitties")))}l.isMDXComponent=!0}}]);